# -*- coding: utf-8 -*-
"""VGG19_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R3on9xEy2hFh8UyJrt-jDlKkLz47X4pw
"""

##line1:VGG19 model's fc1 layer (last before layer) of the architecture is extracted and visualized
#http://image-net.org/about-stats
#https://arxiv.org/abs/1512.03385
#below code has been tested and executed only in colab.research.google.com .Please make sure you have enabled GPU from notebook settings before execution

#for visualising VGG19 model
!pip install -q pydot-ng
!pip install graphviz
!apt-get install graphviz

import pydot_ng
import graphviz

from keras.applications.vgg19 import VGG19
from keras.preprocessing import image
from keras.applications.vgg19 import preprocess_input,decode_predictions
from keras.models import Model
import numpy as np

#For visualising picture
from matplotlib import pyplot as plt
# %matplotlib inline

#extracting 'fc1'(fully connected layer 1) layer from base_model and storing it in model
base_model=VGG19(weights='imagenet',include_top=True)
model=Model(inputs=base_model.input,outputs=base_model.get_layer('fc1').output)

from keras.models import Sequential

from keras.layers import Dense, Activation

#its not possible to give predictions from fc1 layer immediately ;only after passing it through softmax layer (assigning probabilities) we can use predict function to classify 
#in order to add layer you need to take a sequential initialized model and then add fc1 model along with it

#sequential model is initialised with model2
model2=Sequential()
#fc1 layer is added in a sequential manner to model2
model2.add(model)
#adding softmax layer for prediction
model2.add(Dense(1000,activation='softmax'))

#image is loaded from url
#you can use imread to load loacally 
from urllib.request import urlopen

#url of the image is stored in url_link1
url_link1=urlopen("https://secure.img1-fg.wfcdn.com/im/60243122/resize-h800%5Ecompr-r85/4037/40372281/Corona+Extendable+Dining+Table.jpg")

#(224,224) is the target size of resnet50 model
img=image.load_img(url_link1,target_size=(224,224))

#visuvalising input image
plt.imshow(img)

#preprocessing input image
x=image.img_to_array(img)
x=np.expand_dims(x,axis=0)
x=preprocess_input(x)

fc1_layer=model2.predict(x)

print("predict:",decode_predictions(fc1_layer))

from keras.utils.vis_utils import model_to_dot
from IPython.display import SVG

#model of base_model(complete VGG19)
SVG(model_to_dot(base_model).create(prog='dot',format='svg'))

#below you can see that model contains blocks till 'fc1' layer (model)
#extracted model
SVG(model_to_dot(model).create(prog='dot',format='svg'))

#after addition of dense1 layer for softmax prediction(model+softmax) 
#(extracted layer+ softmax)--->predictions
SVG(model_to_dot(model2).create(prog='dot',format='svg'))

#you can use model.summary() function to visualize models in text wise manner along with parameters
#model.summary()
#base_model.summary() 
model2.summary()